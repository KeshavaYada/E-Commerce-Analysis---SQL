/*
1. Top Selling Products
Query the top 10 products by total sales value.
Include product name, total quantity sold, and total sales value.
*/

select pr.product_name,sum(od.quantity) as "total quantity sold",sum(od.total_sale) as "total sales value"
from products as Pr
join order_items as od
on pr.product_id = od.product_id 
group by pr.product_name
order by sum(od.total_sale) desc
limit 10;


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
SELECT 
	pr.category_id,
	cu.category_name,
	SUM(oi.total_sale) as total_sale,
	SUM(oi.total_sale)/
					(SELECT SUM(total_sale) FROM order_items) 
					* 100
	as contribution
FROM order_items as oi
JOIN
products as pr
ON pr.product_id = oi.product_id
LEFT JOIN category as cu
ON cu.category_id = pr.category_id
GROUP BY pr.category_id,
	cu.category_name
ORDER BY SUM(oi.total_sale) DESC
/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

SELECT cu.customer_id,CONCAT(cu.f_name, ' ',  cu.l_name) as full_name,
	SUM(total_sale)/COUNT(od.order_id) as AOV,
	COUNT(od.order_id) as total_orders 
FROM orders as od
JOIN 
customers as cu
ON cu.customer_id = od.customer_id
JOIN 
order_items as oi
ON oi.order_id = od.order_id
GROUP BY cu.customer_id,full_name
HAVING  COUNT(od.order_id) > 5


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/


select  year, month, current_months_sale,lag(current_months_sale,1) OVER (order by year,month) as last_month_sale
from 
(select extract(month from order_date) as month,extract(year from order_date) as year,round(sum(total_sale::numeric),2) as current_months_sale
from orders as od
join order_items as oi
on od.order_id = oi.order_id
where order_date >= CURRENT_DATE - interval '1 year'
group by month,year
)

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
*/
-- Method 1
SELECT *
FROM customers
WHERE customer_id NOT IN (SELECT 
					DISTINCT customer_id
				FROM orders
				);
-- Method 2

SELECT *
FROM customers as c
LEFT JOIN
orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL


/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

WITH ranking_table
AS
(
SELECT 
	cu.state,
	cat.category_name,
	SUM(oi.total_sale) as total_sale,
	RANK() OVER(PARTITION BY cu.state ORDER BY SUM(oi.total_sale) ASC) as rank
FROM orders as od
JOIN 
customers as cu
ON od.customer_id = cu.customer_id
JOIN
order_items as oi
ON od.order_id = oi. order_id
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN
category as cat
ON cat.category_id = p.category_id
GROUP BY 1, 2
)
SELECT 
*
FROM ranking_table
WHERE rank = 1


-- listing the categories and their count of states it is leading 
WITH ranking_table
AS

(
SELECT 
	cu.state,
	cat.category_name,
	SUM(oi.total_sale) as total_sale,
	RANK() OVER(PARTITION BY cu.state ORDER BY SUM(oi.total_sale) ASC) as rank
FROM orders as od
JOIN 
customers as cu
ON od.customer_id = cu.customer_id
JOIN
order_items as oi
ON od.order_id = oi. order_id
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN
category as cat
ON cat.category_id = p.category_id
GROUP BY 1, 2
)
select Category_name,count(*) as Leading_in_No_of_States
from ranking_table
group by category_name


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

-- Least Customers
SELECT 
	c.customer_id,
	CONCAT(c.f_name, ' ',  c.l_name) as full_name,
	SUM(total_sale) as CLTV,
	DENSE_RANK() OVER( ORDER BY SUM(total_sale) DESC) as cx_ranking
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
order by cx_ranking Desc
Limit 10

-- Top customers

SELECT 
	c.customer_id,
	CONCAT(c.f_name, ' ',  c.l_name) as full_name,
	SUM(total_sale) as CLTV,
	DENSE_RANK() OVER( ORDER BY SUM(total_sale) DESC) as cx_ranking
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
order by cx_ranking 
Limit 10


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
	i.inventory_id,
	p.product_name,
	i.stock_remaining as current_stock_left,
	i.restock_date,
	i.ware_house_id
FROM inventory as i
join 
products as p
ON p.product_id = i.product_id
WHERE i.stock_remaining  < 10


/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

SELECT 
	cu.*,
	od.*,
	s.shipping_providers,
s.shipping_date - od.order_date as days_took_to_ship
FROM orders as od
JOIN
customers as cu
ON cu.customer_id = od.customer_id
JOIN 
shipping as s
ON od.order_id = s.order_id
WHERE s.shipping_date - od.order_date > 3


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
	p.payment_status,
	COUNT(*) as total_cnt,
	COUNT(*)::numeric/(SELECT COUNT(*) FROM payments)::numeric * 100 as Percentage
FROM orders as o
JOIN
payments as p
ON o.order_id = p.order_id
GROUP BY p.payment_status



/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/
WITH top_sellers
AS
(SELECT 
	s.sellar_id,
	s.sellar_name,
	SUM(oi.total_sale) as total_sale
FROM orders as o
JOIN
sellers as s
ON o.seller_id = s.sellar_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY s.sellar_id,
	s.sellar_name
ORDER BY SUM(oi.total_sale) DESC
LIMIT 5
),

sellers_reports
AS
(SELECT 
	o.seller_id,
	ts.sellar_name,
	o.order_status,
	COUNT(*) as total_orders
FROM orders as o
JOIN 
top_sellers as ts
ON ts.sellar_id = o.seller_id
WHERE 
	o.order_status NOT IN ('Inprogress', 'Returned')
	
GROUP BY o.seller_id,
	ts.sellar_name,
	o.order_status
)
SELECT 
	seller_id,
	sellers_reports.sellar_name,t.total_sale,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
	
FROM sellers_reports 
join top_sellers as t
on sellers_reports.seller_id = t.sellar_id
GROUP BY seller_id,
	sellers_reports.sellar_name,t.total_sale

/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	
	SUM(total_sale - (p.cog * oi.quantity))/sum(total_sale) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY p.product_id,
	p.product_name
) as t1


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/
SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*)::numeric * 100 as return_percentage
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC

/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

WITH cte1
AS
(SELECT * FROM sellers
WHERE sellar_id NOT IN (SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)

SELECT 
od.seller_id,
MAX(od.order_date) as last_sale_date,
MAX(oi.total_sale) as last_sale_amount
FROM orders as od
JOIN 
cte1
ON cte1.sellar_id = od.seller_id
JOIN order_items as oi
ON od.order_id = oi.order_id
GROUP BY od.seller_id


/*
16. IDENTITY customers who are returning
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT 
c_full_name as customers,
total_orders,
total_return,
CASE
	WHEN total_return > 5 THEN 'Returning_customers' ELSE 'New'
END as cx_category
FROM
(SELECT 
	CONCAT(c.f_name, ' ', c.l_name) as c_full_name,
	COUNT(o.order_id) as total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return	
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1
)

/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

SELECT * FROM 
(SELECT 
	c.state,
	CONCAT(c.f_name, ' ', c.l_name) as customers,
	COUNT(o.order_id) as total_orders,
	SUM(total_sale) as total_sale,
	DENSE_RANK() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) as rank
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
customers as c
ON 
c.customer_id = o.customer_id
GROUP BY c.state, customers
) as t1
WHERE rank <=5



-- 


/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/


SELECT 
	s.shipping_providers,
	COUNT(o.order_id) as order_handled,
	SUM(oi.total_sale) as total_sale,
	COALESCE(AVG(s.return_date - s.shipping_date), 0) as average_days
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
shipping as s
ON 
s.order_id = o.order_id
GROUP BY s.shipping_providers

-- No proper information on Returndate as they are more missing values in the dataset




/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/



WITH last_year_sale
as
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY p.product_id,
	p.product_name
),

current_year_sale
AS
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY p.product_id,
	p.product_name
)

SELECT
	cs.product_id,
	ls.revenue as last_year_revenue,
	cs.revenue as current_year_revenue,
	ls.revenue - cs.revenue as rev_diff,
	ROUND((cs.revenue - ls.revenue)::numeric/ls.revenue::numeric * 100, 2) as reveneue_dec_ratio
FROM last_year_sale as ls
JOIN
current_year_sale as cs
ON ls.product_id = cs.product_id
WHERE 
	ls.revenue > cs.revenue


/*20. Final Task: Stored Procedure
Create a stored procedure that, when a product is sold, performs the following actions:
Inserts a new sales record into the orders and order_items tables.
Updates the inventory table to reduce the stock based on the product and quantity purchased.
The procedure should ensure that the stock is adjusted immediately after recording the sale.
*/

CREATE OR REPLACE PROCEDURE Add_sales_Instance
(
    p_order_id INT,
    p_customer_id INT,
    p_seller_id INT,
    p_order_item_id INT,
    p_product_id INT,
    p_quantity INT
)
LANGUAGE plpgsql
AS $$
DECLARE 
    v_count INT;
    v_price FLOAT;
    v_product VARCHAR(50);
BEGIN
    -- Fetching product name and price based on product_id entered
    SELECT 
        price, product_name
    INTO
        v_price, v_product
    FROM products
    WHERE product_id = p_product_id;
    
    -- Checking stock and product availability in inventory    
    SELECT 
        COUNT(*) 
    INTO
        v_count
    FROM inventory
    WHERE 
        product_id = p_product_id
        AND 
        inventory.stock_remaining >= p_quantity;
        
    IF v_count > 0 THEN
        -- Add into orders and order_items table, then update inventory
        INSERT INTO orders(order_id, order_date, customer_id, seller_id)
        VALUES
            (p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);

        INSERT INTO order_items(order_item_id, order_id, product_id, quantity, price_per_unit, total_sale)
        VALUES
            (p_order_item_id, p_order_id, p_product_id, p_quantity, v_price, v_price * p_quantity);

        UPDATE inventory
        SET stock_remaining = stock_remaining - p_quantity
        WHERE product_id = p_product_id;
        
        RAISE NOTICE 'Thank you, product: % sale has been added and inventory stock updated', v_product; 
    ELSE
        RAISE NOTICE 'Thank you for your info, the product: % is not available', v_product;
    END IF;
END;
$$;




-- Testing Store Procedure**
call add_sales_instance
(
25005, 2, 5, 25004, 1, 14
);




